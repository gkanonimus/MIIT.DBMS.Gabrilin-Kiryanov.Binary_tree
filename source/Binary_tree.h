#pragma once
#include <iostream>
#include "Node.h"

class Tree;

    /*
     * \brief Класс дерево
     */
class Tree
{
public:

    /*
     * \brief Конструктор класса
     */
    Tree();

    /*
     * \brief Деструктор класса
     */
    ~Tree();

    /*
     * \brief Корень дерева
     */
    Node* root;

    /*
     * \brief Публичнная функция проверки дерева на пустоту
     * \return true, если дерево является пустым
     */
    bool IsEmpty();

    /*
     * \brief Публичная функция добавления элемента в дерево
     * \param Добавляемое значение
     */
    void insert(int key);

    /*
     * \brief Публичная функция удаления дерева
     */
    void deleteTree();

    /*
     * \brief Публичная ункция вывода дерева в упорядоченном состоянии
     */
    void printTree();

    /*
     * \brief Публичная функция замены первого найденного узла указанным
     * \param Заменяемое значение
     * \param Новое значение
     */
    void changeNode(int old_key, int new_key);

    /*
     * \brief Публичная функция удаления первого найденного узла с указанным значением из дерева
     * \param Удаляемое значение
     * \return
     */
    void deleteNode(int key);
    
private:

    /*
     * \brief Приватная функция добавления элемента в дерево
     * \param Добавляемое значение
     * \return Измененное дерево с добавленным значением
     */
    Node* insert(int key, Node* leaf);

    /*
     * \brief Приватная вспомогательная функция добавления элемента в дерево
     * \param Добавляемое значение
     * \return Измененное дерево с добавленным значением
     */
    Node* newNode(int key);

    /*
     * \brief Приватная функция удаления первого найденного узла с указанным значением из дерева
     * \param Удаляемое значение
     * \return Измененное дерево с удаленным значением
     */
    Node* deleteNode(int key, Node* leaf);

    /*
     * \brief Приватная вспомогательная функция для нахождения минимального элемента в дереве
     * \return Узел с наименьшим значением
     */
    Node* minValueNode(Node* leaf);

    /*
     * \brief Приватная функция удаления дерева
     * \param Указатель на вершину дерева
     */
    void deleteTree(Node* leaf);

    /*
     * \brief Приватная функция вывода дерева в упорядоченном состоянии
     * \param Указатель на вершину дерева
     * \return Строка с упорядоченным перечислением элементов дерева
     */
    std::string ToString(Node* leaf);

    /*
     * \brief Приватная функция замены первого найденного узла указанным
     * \param Заменяемое значение
     * \param Новое значение
     * \param Указатель на вершину дерева
     */
    void changeNode(int old_key, int new_key, Node* root);
};